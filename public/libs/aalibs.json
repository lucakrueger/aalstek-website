{
    "function.d.ts": "export type CloudFunction = {\n    params: any;\n    onRequest: (params: any) => void;\n};\nexport declare namespace Functions {\n    const Register: (functionObject: CloudFunction) => void;\n}\n",
    "params.d.ts": "export declare namespace Types {\n    abstract class Type {\n        private identifier;\n        private rules;\n        constructor(identifier: string);\n        abstract isValid(value: any): any | undefined;\n        abstract custom(rule: (value: any) => boolean): any;\n        protected addRule(rule: (value: any) => boolean): void;\n        protected add(self: any, rule: (value: any) => boolean): any;\n        getIdentifier(): string;\n        /**\n         * Tries to validate rules with an unknown Object\n         * @param value Any\n         * @returns\n         */\n        match(value: any): boolean;\n    }\n    export class String extends Type {\n        constructor();\n        isValid(value: any): any | undefined;\n        /**\n         * Defines a custom evaluation rule\n         * @param pattern Reqular Expression\n         * @returns\n         */\n        custom(rule: (value: string) => boolean): Types.String;\n        /**\n         * Ensures value matches a given regex\n         * @param pattern Reqular Expression\n         * @returns\n         */\n        regex(pattern: string): Types.String;\n        /**\n         * Ensures value matches a given string\n         * @param s String\n         * @returns\n         */\n        matches(s: string): Types.String;\n        /**\n         * Ensures value contains given string\n         * @param s String\n         * @returns\n         */\n        contains(substring: string): Types.String;\n        /**\n         * Ensures values contains character at index\n         * @param char Character\n         * @param index Number\n         * @returns\n         */\n        charAt(char: string, index: number): Types.String;\n        /**\n         * Ensures digit length is bigger or equal n\n         * @param n Number\n         * @returns\n         */\n        min(n: number): Types.String;\n        /**\n         * Ensures digit length is smaller or equal n\n         * @param n Number\n         * @returns\n         */\n        max(n: number): Types.String;\n        /**\n         * Ensures digit length is bigger than n\n         * @param n Number\n         * @returns\n         */\n        bigger(n: number): Types.String;\n        /**\n         * Ensures digit length is smaller than n\n         * @param n Number\n         * @returns\n         */\n        smaller(n: number): Types.String;\n    }\n    export class Number extends Type {\n        constructor();\n        isValid(value: any): any | undefined;\n        /**\n         * Defines a custom evaluation rule\n         * @param pattern Reqular Expression\n         * @returns\n         */\n        custom(rule: (value: string) => boolean): Types.String;\n        /**\n         * Ensures value is bigger or equal n\n         * @param n Number\n         * @returns\n         */\n        min(n: number): Types.Number;\n        /**\n         * Ensures value is smaller or equal n\n         * @param n Number\n         * @returns\n         */\n        max(n: number): Types.Number;\n        /**\n         * Ensures value is smaller than n\n         * @param n Number\n         * @returns\n         */\n        smaller(n: number): Types.Number;\n        /**\n         * Ensures value is bigger than n\n         * @param n Number\n         * @returns\n         */\n        bigger(n: number): Types.Number;\n        /**\n         * Ensures value equals n\n         * @param n Number\n         * @returns\n         */\n        equals(n: number): Types.Number;\n        /**\n         * Ensures value is negative\n         * @returns\n         */\n        negative(): Types.Number;\n        /**\n         * Ensures value is positive\n         * @returns\n         */\n        positive(): Types.Number;\n        /**\n         * Checks number is n digits long\n         * @param n Number\n         * @returns\n         */\n        digits(n: number): Types.Number;\n    }\n    export class Boolean extends Type {\n        constructor();\n        isValid(value: any): any | undefined;\n        /**\n         * Defines a custom evaluation rule\n         * @param pattern Reqular Expression\n         * @returns\n         */\n        custom(rule: (value: string) => boolean): Types.Boolean;\n    }\n    export class Obj extends Type {\n        constructor();\n        isValid(value: any): any | undefined;\n        /**\n         * Defines a custom evaluation rule\n         * @param pattern Reqular Expression\n         * @returns\n         */\n        custom(rule: (value: string) => boolean): Types.Obj;\n        matches(obj: any): Types.Obj;\n    }\n    export {};\n}\nexport declare namespace Helpers {\n    const ToNumber: (value: any) => number | undefined;\n    const ToBoolean: (value: any) => boolean | undefined;\n}\n"
}